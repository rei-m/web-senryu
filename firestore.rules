function validateTextSize(text, min, max) {
  return text is string && min <= text.size() && text.size() <= max  
}

function validateRyugou(text) {
  return validateTextSize(text, 1, 20)
}

function validateUserDescription(text) {
  return validateTextSize(text, 0, 80)
}

function validatePhrase(text) {
  return validateTextSize(text, 1, 10)
}

function validateComment(text) {
  return text == null || validateTextSize(text, 1, 30)
}

service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }
    function isUserAuthenticated(uid) {
      return request.auth.uid == uid;
    }
    function authUserPath() {
      return /databases/$(database)/documents/users/$(request.auth.uid)
    }
    function incomingData() {
      return request.resource.data;
    }
    function currentData() {
      return resource.data;
    }
    function validateUserRef(data) {
      return data is map
        && (isAuthenticated() && data.ref == authUserPath() && data.ryugou is string)
          || (data.ref == null && data.ryugou is string);
    }

    match /senryu/{senryuId} {
      allow get;
      allow list: if request.query.limit <= 20;
      allow create: if validatePhrase(incomingData().jouku)
        && incomingData().size() == 6
        && validatePhrase(incomingData().chuuku)
        && validatePhrase(incomingData().geku)
        && validateComment(incomingData().comment)
        && validateUserRef(incomingData().user)
        && (incomingData().createdAt is timestamp);
      allow update: if isAuthenticated()
        && currentData().user.ref == authUserPath()
        && incomingData().size() == 8
        && validateTextSize(incomingData().imageUrl, 1, 255)
        && validateTextSize(incomingData().storageUri, 1, 255)
      allow delete: if isAuthenticated()
        && currentData().user.ref == authUserPath();
    }
    match /aggregate/count {
      allow get;
      allow create, update: if incomingData().size() == 1
        && incomingData().senryu is int;
    }
    match /users/{userId} {
      allow get;
      allow create, update: if isAuthenticated()
        && isUserAuthenticated(userId)
        && incomingData().size() <= 3
        && incomingData().senryuCount is int
        && (incomingData().ryugou == null || validateRyugou(incomingData().ryugou))
        && (incomingData().description == null || validateUserDescription(incomingData().description));
      allow delete: if isAuthenticated()
        && isUserAuthenticated(userId);
    }
  }
}
