function validatePhrase(text) {
  return text is string && 1 <= text.size() && text.size() <= 10
}

function validateComment(text) {
  return text is null || (text is string && 1 <= text.size() && text.size() <= 30)
}

service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }
    function isUserAuthenticated(uid) {
      return request.auth.uid == uid;
    }
    function incomingData() {
      return resource.data;
    }
    match /senryu/{senryuId} {
      allow get;
      allow list: if request.query.limit <= 20;
      allow create: if validatePhrase(incomingData().jouku)
        && validatePhrase(incomingData().chuuku)
        && validatePhrase(incomingData().geku)
        && validateComment(incomingData().comment)
        && (incomingData().completed is bool)
        && (incomingData().createdAt is timestamp)
        && (incomingData().updatedAt is timestamp);
      allow delete: if isAuthenticated()
        && incomingData().user.ref
        && isUserAuthenticated(incomingData().user.ref.id);
    }
  }
}
